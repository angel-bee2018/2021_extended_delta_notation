}
if (right_ref_vertex_grown_from_user_query_start > selected_user_range_end) {
tibble_vertices_with_distances <- tibble_vertices_with_distances[!(tibble_vertices_with_distances$ref_vertex == right_ref_vertex_grown_from_user_query_start & tibble_vertices_with_distances$query_vertex == selected_user_range_start), ]
}
return(tibble_vertices_with_distances)
} ) %>% dplyr::bind_rows() %>% unique
# make the distances directional
tibble_distance_annotations_based_on_user_query <- tibble_distance_annotations_based_on_user_query %>%
dplyr::mutate("ref_vertex_minus_query_vertex" = purrr::map(.x = `ref_vertex_minus_query_vertex`, .f = function(x) {
if (x < 0) {
return(paste(abs(x), ">", sep = ""))
} else if (x > 0) {
return(paste("<", abs(x), sep = ""))
} else {
return(x)
}
} ) %>% unlist  )
tibble_distance_annotations_based_on_user_query$panel <- a2
} else {
tibble_distance_annotations_based_on_user_query <- tibble()
tibble_all_exons_of_overlapped_parent_transcript <- tibble()
}
tibble_distance_annotations_based_on_user_query
tibble_all_exons_of_overlapped_parent_transcript
list_distance_annotation_data_flattened <- list(
"tibble_distance_annotations_based_on_user_query" = tibble_distance_annotations_based_on_user_query,
"tibble_all_exons_of_overlapped_parent_transcript" = tibble_all_exons_of_overlapped_parent_transcript
)
list_distance_annotation_data_flattened
list_distances_between_user_ranges_and_reference_annotations <- list_distance_annotation_data_flattened %>% purrr::map(~.x$tibble_distance_annotations_based_on_user_query) %>% purrr::keep(.p = ~.x %>% length > 0)
list_distances_between_user_ranges_and_reference_annotations
list_distance_annotation_data_flattened
list_distance_annotation_data_flattened <- list(list(
"tibble_distance_annotations_based_on_user_query" = tibble_distance_annotations_based_on_user_query,
"tibble_all_exons_of_overlapped_parent_transcript" = tibble_all_exons_of_overlapped_parent_transcript
))
list_distances_between_user_ranges_and_reference_annotations <- list_distance_annotation_data_flattened %>% purrr::map(~.x$tibble_distance_annotations_based_on_user_query) %>% purrr::keep(.p = ~.x %>% length > 0)
list_distances_between_user_ranges_and_reference_annotations
# add back in the exons touched by the distance range. this is so that the calculated distances can find a ref exon vertex even when it's not in view.
list_tibbles_track_features_visible_flattened <- purrr::pmap(
.l = list(
"a1" = list_tibbles_track_features_visible_flattened,
"a2" = list_distance_annotation_data_flattened %>% purrr::map(~.x$tibble_all_exons_of_overlapped_parent_transcript),
"a3" = names(list_tibbles_track_features_visible_flattened)
), .f = function(a1, a2, a3) {
dplyr::bind_rows(a1, a2) %>% dplyr::mutate("panel" = a3) %>%
return
}
) %>% set_names(nm = names(list_tibbles_track_features_visible_flattened))
list_tibbles_track_features_visible_flattened
# add back in the exons touched by the distance range. this is so that the calculated distances can find a ref exon vertex even when it's not in view.
list_tibbles_track_features_visible_flattened <- purrr::pmap(
.l = list(
"a1" = global_list_tibbles_track_features_visible_flattened,
"a2" = list_distance_annotation_data_flattened %>% purrr::map(~.x$tibble_all_exons_of_overlapped_parent_transcript),
"a3" = names(global_list_tibbles_track_features_visible_flattened)
), .f = function(a1, a2, a3) {
dplyr::bind_rows(a1, a2) %>% dplyr::mutate("panel" = a3) %>%
return
}
) %>% set_names(nm = names(list_tibbles_track_features_visible_flattened))
# add back in the exons touched by the distance range. this is so that the calculated distances can find a ref exon vertex even when it's not in view.
list_tibbles_track_features_visible_flattened <- purrr::pmap(
.l = list(
"a1" = global_list_tibbles_track_features_visible_flattened_1,
"a2" = list_distance_annotation_data_flattened %>% purrr::map(~.x$tibble_all_exons_of_overlapped_parent_transcript),
"a3" = names(global_list_tibbles_track_features_visible_flattened_1)
), .f = function(a1, a2, a3) {
dplyr::bind_rows(a1, a2) %>% dplyr::mutate("panel" = a3) %>%
return
}
) %>% set_names(nm = names(list_tibbles_track_features_visible_flattened))
# add back in the exons touched by the distance range. this is so that the calculated distances can find a ref exon vertex even when it's not in view.
list_tibbles_track_features_visible_flattened <- purrr::pmap(
.l = list(
"a1" = global_list_tibbles_track_features_visible_flattened_1,
"a2" = list_distance_annotation_data_flattened %>% purrr::map(~.x$tibble_all_exons_of_overlapped_parent_transcript),
"a3" = names(global_list_tibbles_track_features_visible_flattened_1)
), .f = function(a1, a2, a3) {
dplyr::bind_rows(a1, a2) %>% dplyr::mutate("panel" = a3) %>%
return
}
) %>% set_names(nm = names(global_list_tibbles_track_features_visible_flattened_1))
list_tibbles_track_features_visible_flattened
View(list_tibbles_track_features_visible_flattened$`Reference protein features: dbptm`)
list_tibbles_track_features_visible_flattened
View(list_tibbles_track_features_visible_flattened$`Reference protein features: dbptm`)
View(global_list_tibbles_track_features_visible_flattened_1)
View(global_list_tibbles_track_features_visible_flattened_1$`Reference protein features: dbptm`)
list_distance_annotation_data_flattened %>% purrr::map(~.x$tibble_all_exons_of_overlapped_parent_transcript)
list_tibbles_track_features_visible_flattened$`Reference protein features: dbptm`
list_tibbles_track_features_visible_flattened$`Reference protein features: dbptm` %>% unique
list_distance_annotation_data_flattened %>% purrr::map(~.x$tibble_all_exons_of_overlapped_parent_transcript)
runApp()
runApp()
global_2_list_tibbles_track_features_visible_flattened
global_workshop_reactiveValues_plot_metadata
global_workshop_reactiveValues_current_plot_range
global_list_distances_between_user_ranges_and_reference_annotations
global_workshop_reactiveValues_selected_user_range
global_2_list_tibbles_track_features_visible_flattened
runApp()
runApp()
global_2_list_tibbles_track_features_visible_flattened
global_workshop_reactiveValues_plot_metadata
runApp()
length(global_2_list_tibbles_track_features_visible_flattened[grep(x = names(global_2_list_tibbles_track_features_visible_flattened), pattern = "^Reference protein")]) > 0
length(global_list_distances_between_user_ranges_and_reference_annotations) > 0
global_workshop_reactiveValues_selected_user_range
global_list_distances_between_user_ranges_and_reference_annotations
v
global_workshop_reactiveValues_current_plot_range
global_tibble_user_ranges_visible
global_workshop_reactiveValues_plot_metadata
global_workshop_reactiveValues_plot_metadata
global_2_list_tibbles_track_features_visible_flattened
runApp()
runApp()
global_brush
runApp()
runApp()
global_2_list_tibbles_track_features_visible_flattened
.global_2_list_tibbles_track_features_visible_flattened
global_2_list_tibbles_track_features_visible_flattened
workshop_reactiveValues_selected_user_range <- global_workshop_reactiveValues_selected_user_range
list_distances_between_user_ranges_and_reference_annotations <<- global_list_distances_between_user_ranges_and_reference_annotations
workshop_reactiveValues_current_plot_range <<- reactiveValuesToList(global_workshop_reactiveValues_current_plot_range)
tibble_user_ranges_visible <<- global_tibble_user_ranges_visible
workshop_reactiveValues_plot_metadata <<- reactiveValuesToList(global_workshop_reactiveValues_plot_metadata)
list_tibbles_track_features_visible_flattened <<- global_2_list_tibbles_track_features_visible_flattened
list_distances_between_user_ranges_and_reference_annotations <<- global_list_distances_between_user_ranges_and_reference_annotations
workshop_reactiveValues_current_plot_range <<- (global_workshop_reactiveValues_current_plot_range)
tibble_user_ranges_visible <<- global_tibble_user_ranges_visible
workshop_reactiveValues_plot_metadata <<- reactiveValuesToList(global_workshop_reactiveValues_plot_metadata)
list_tibbles_track_features_visible_flattened <<- global_2_list_tibbles_track_features_visible_flattened
list_distances_between_user_ranges_and_reference_annotations <<- global_list_distances_between_user_ranges_and_reference_annotations
workshop_reactiveValues_current_plot_range <<- (global_workshop_reactiveValues_current_plot_range)
tibble_user_ranges_visible <<- global_tibble_user_ranges_visible
workshop_reactiveValues_plot_metadata <<- (global_workshop_reactiveValues_plot_metadata)
list_tibbles_track_features_visible_flattened <<- global_2_list_tibbles_track_features_visible_flattened
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference transcripts")],
.f = function(a1) {
list(
geom_segment(data = a1 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
geom_text(data = a1 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, fontface = "italic", mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = hgnc_stable_transcript_ID, "b3" = transcript_version), .f = function(b1, b2, b3) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
geom_segment(data = a1 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
geom_label(data = a1 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
)
} ) %>% purrr::flatten()
list(
ggplot(),
# these mark the original viewing window
geom_vline(colour = "green", lty = 2, xintercept = workshop_reactiveValues_current_plot_range$start),
geom_vline(colour = "green", lty = 2, xintercept = workshop_reactiveValues_current_plot_range$end),
theme_bw(),
theme(text = element_text(family = "Helvetica")),
ggplot2::xlab(paste("chr", workshop_reactiveValues_current_plot_range$chr, sep = "")),
# brush resizing (x)
# NOTE we CANNOT use coord_cartesion for facet-specific y. MUST use the scales.
coord_cartesian(xlim = workshop_plot_brush_ranges$x
# ,
# ylim = c(plot_view_initial_y_start, plot_view_initial_y_end)
)
) %>%
purrr::splice(
# reference_transcripts
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference transcripts")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference transcripts")],
.f = function(a1) {
list(
geom_segment(data = a1 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
geom_text(data = a1 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, fontface = "italic", mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = hgnc_stable_transcript_ID, "b3" = transcript_version), .f = function(b1, b2, b3) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
geom_segment(data = a1 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
geom_label(data = a1 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
)
} ) %>% purrr::flatten()
},
# reference_protein_features
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference protein")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference protein")],
.f = function(a1) {
list(
geom_text(data = a1 %>% dplyr::filter(type == "exon") %>% dplyr::distinct(hgnc_stable_protein_ID, .keep_all = TRUE), nudge_y = 0.25, fontface = "italic", mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = protein_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = hgnc_stable_protein_ID), .f = function(b1, b2) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
geom_segment(data = a1 %>% dplyr::filter(type == "exon"), colour = "orange", mapping = aes(x = start, xend = end, y = protein_id, yend = protein_id), size = 10),
ggrepel::geom_label_repel(data = a1, nudge_y = 0.15, box.padding = 1, mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = protein_id, label = paste(modified_residue, modified_residue_position, PTM_type, sep = "")))
)
# %>% purrr::splice(
#     .,
#     purrr::map(.x = a1 %>% dplyr::filter(type == "exon") %>% dplyr::rowwise() %>% group_split(),
#                .f = function(b1) {
#                    ggrepel::geom_label_repel(data = b1, colour = "black", angle = 90, force = 5, force_pull = 0, direction = "both", fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = protein_id, label = paste(modified_residue, modified_residue_position, PTM_type, sep = ""))) %>% return
#                } )
#     )
} ) %>% purrr::flatten()
},
# custom_gtf
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")],
.f = function(a2) {
list(
geom_segment(data = a2 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
geom_text(data = a2 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = transcript_id), .f = function(b1, b2) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
geom_segment(data = a2 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
geom_label(data = a2 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
)
} ) %>% purrr::flatten()
},
# user ranges
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_curve(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 2, curvature = -0.25, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_segment(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 5, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible) > 1) {
geom_text(data = tibble_user_ranges_visible[tibble_user_ranges_visible$id != "0", ], colour = "black", nudge_y = 0.25, fontface = "bold", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = id, label = id))
},
if (workshop_reactiveValues_selected_user_range$id %in% tibble_user_ranges_visible$id) {
geom_vline(colour = "red", lty = 2, xintercept = workshop_reactiveValues_selected_user_range$start)
},
if (workshop_reactiveValues_selected_user_range$id %in% tibble_user_ranges_visible$id) {
geom_vline(colour = "red", lty = 2, xintercept = workshop_reactiveValues_selected_user_range$end)
},
# distance annotation
if (length(list_distances_between_user_ranges_and_reference_annotations) > 0) {
purrr::map(
.x = list_distances_between_user_ranges_and_reference_annotations,
.f = function(a3) {
list(
geom_segment(data = a3[a3$ref_vertex_minus_query_vertex != 0, ], colour = "red", arrow = arrow(angle = 30), mapping = aes(x = ref_vertex, xend = query_vertex, y = transcript_id, yend = transcript_id)),
geom_label(data = a3, colour = "red", nudge_y = -0.25, mapping = aes(x = purrr::map2(.x = ref_vertex, .y = query_vertex, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = ref_vertex_minus_query_vertex))
)
} ) %>% purrr::flatten()
},
# FACETS
if (length(list_tibbles_track_features_visible_flattened %>% flatten) > 0 | nrow(tibble_user_ranges_visible) > 0) {
ggplot2::facet_grid(factor(panel, level = workshop_reactiveValues_plot_metadata$list_y_axis_scale %>% names) ~ ., scales = "free_y")
},
# adaptive facet aspect ratio
if (length(list_tibbles_track_features_visible_flattened %>% flatten) > 0 | nrow(tibble_user_ranges_visible) > 0) {
ggh4x::force_panelsizes(rows = workshop_reactiveValues_plot_metadata$vector_number_of_features_per_track %>%
(function(x) {
if (sum(x) != 0) {
return(x/sum(x))
} else {
return(0)}
} ) )
},
# facet-specific brush resizing (y)
if (length(list_tibbles_track_features_visible_flattened %>% flatten) > 0 | nrow(tibble_user_ranges_visible) > 0) {
ggh4x::facetted_pos_scales(
y = workshop_reactiveValues_plot_metadata$list_y_axis_scale %>% purrr::map(~scale_y_discrete(limits = .x, breaks = .x, labels = .x))
)
}
)  %>% purrr::reduce(ggplot2:::`+.gg`)
list(
ggplot(),
# these mark the original viewing window
geom_vline(colour = "green", lty = 2, xintercept = workshop_reactiveValues_current_plot_range$start),
geom_vline(colour = "green", lty = 2, xintercept = workshop_reactiveValues_current_plot_range$end),
theme_bw(),
theme(text = element_text(family = "Helvetica")),
ggplot2::xlab(paste("chr", workshop_reactiveValues_current_plot_range$chr, sep = ""))
# brush resizing (x)
# NOTE we CANNOT use coord_cartesion for facet-specific y. MUST use the scales.
# ,
# ylim = c(plot_view_initial_y_start, plot_view_initial_y_end)
)
) %>%
purrr::splice(
# reference_transcripts
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference transcripts")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference transcripts")],
.f = function(a1) {
list(
geom_segment(data = a1 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
geom_text(data = a1 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, fontface = "italic", mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = hgnc_stable_transcript_ID, "b3" = transcript_version), .f = function(b1, b2, b3) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
geom_segment(data = a1 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
geom_label(data = a1 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
)
} ) %>% purrr::flatten()
},
# reference_protein_features
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference protein")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference protein")],
.f = function(a1) {
list(
geom_text(data = a1 %>% dplyr::filter(type == "exon") %>% dplyr::distinct(hgnc_stable_protein_ID, .keep_all = TRUE), nudge_y = 0.25, fontface = "italic", mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = protein_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = hgnc_stable_protein_ID), .f = function(b1, b2) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
geom_segment(data = a1 %>% dplyr::filter(type == "exon"), colour = "orange", mapping = aes(x = start, xend = end, y = protein_id, yend = protein_id), size = 10),
ggrepel::geom_label_repel(data = a1, nudge_y = 0.15, box.padding = 1, mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = protein_id, label = paste(modified_residue, modified_residue_position, PTM_type, sep = "")))
)
# %>% purrr::splice(
#     .,
#     purrr::map(.x = a1 %>% dplyr::filter(type == "exon") %>% dplyr::rowwise() %>% group_split(),
#                .f = function(b1) {
#                    ggrepel::geom_label_repel(data = b1, colour = "black", angle = 90, force = 5, force_pull = 0, direction = "both", fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = protein_id, label = paste(modified_residue, modified_residue_position, PTM_type, sep = ""))) %>% return
#                } )
#     )
} ) %>% purrr::flatten()
},
# custom_gtf
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")],
.f = function(a2) {
list(
geom_segment(data = a2 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
geom_text(data = a2 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = transcript_id), .f = function(b1, b2) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
geom_segment(data = a2 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
geom_label(data = a2 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
)
} ) %>% purrr::flatten()
},
# user ranges
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_curve(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 2, curvature = -0.25, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_segment(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 5, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible) > 1) {
geom_text(data = tibble_user_ranges_visible[tibble_user_ranges_visible$id != "0", ], colour = "black", nudge_y = 0.25, fontface = "bold", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = id, label = id))
},
if (workshop_reactiveValues_selected_user_range$id %in% tibble_user_ranges_visible$id) {
geom_vline(colour = "red", lty = 2, xintercept = workshop_reactiveValues_selected_user_range$start)
},
if (workshop_reactiveValues_selected_user_range$id %in% tibble_user_ranges_visible$id) {
geom_vline(colour = "red", lty = 2, xintercept = workshop_reactiveValues_selected_user_range$end)
},
# distance annotation
if (length(list_distances_between_user_ranges_and_reference_annotations) > 0) {
purrr::map(
.x = list_distances_between_user_ranges_and_reference_annotations,
.f = function(a3) {
list(
geom_segment(data = a3[a3$ref_vertex_minus_query_vertex != 0, ], colour = "red", arrow = arrow(angle = 30), mapping = aes(x = ref_vertex, xend = query_vertex, y = transcript_id, yend = transcript_id)),
geom_label(data = a3, colour = "red", nudge_y = -0.25, mapping = aes(x = purrr::map2(.x = ref_vertex, .y = query_vertex, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = ref_vertex_minus_query_vertex))
)
} ) %>% purrr::flatten()
},
# FACETS
if (length(list_tibbles_track_features_visible_flattened %>% flatten) > 0 | nrow(tibble_user_ranges_visible) > 0) {
ggplot2::facet_grid(factor(panel, level = workshop_reactiveValues_plot_metadata$list_y_axis_scale %>% names) ~ ., scales = "free_y")
},
# adaptive facet aspect ratio
if (length(list_tibbles_track_features_visible_flattened %>% flatten) > 0 | nrow(tibble_user_ranges_visible) > 0) {
ggh4x::force_panelsizes(rows = workshop_reactiveValues_plot_metadata$vector_number_of_features_per_track %>%
(function(x) {
if (sum(x) != 0) {
return(x/sum(x))
} else {
return(0)}
} ) )
},
# facet-specific brush resizing (y)
if (length(list_tibbles_track_features_visible_flattened %>% flatten) > 0 | nrow(tibble_user_ranges_visible) > 0) {
ggh4x::facetted_pos_scales(
y = workshop_reactiveValues_plot_metadata$list_y_axis_scale %>% purrr::map(~scale_y_discrete(limits = .x, breaks = .x, labels = .x))
)
}
)  %>% purrr::reduce(ggplot2:::`+.gg`)
p <- list(
ggplot(),
# these mark the original viewing window
geom_vline(colour = "green", lty = 2, xintercept = workshop_reactiveValues_current_plot_range$start),
geom_vline(colour = "green", lty = 2, xintercept = workshop_reactiveValues_current_plot_range$end),
theme_bw(),
theme(text = element_text(family = "Helvetica")),
ggplot2::xlab(paste("chr", workshop_reactiveValues_current_plot_range$chr, sep = ""))
# brush resizing (x)
# NOTE we CANNOT use coord_cartesion for facet-specific y. MUST use the scales.
# ,
# ylim = c(plot_view_initial_y_start, plot_view_initial_y_end)
)
) %>%
purrr::splice(
# reference_transcripts
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference transcripts")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference transcripts")],
.f = function(a1) {
list(
geom_segment(data = a1 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
geom_text(data = a1 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, fontface = "italic", mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = hgnc_stable_transcript_ID, "b3" = transcript_version), .f = function(b1, b2, b3) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
geom_segment(data = a1 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
geom_label(data = a1 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
)
} ) %>% purrr::flatten()
},
# reference_protein_features
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference protein")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference protein")],
.f = function(a1) {
list(
geom_text(data = a1 %>% dplyr::filter(type == "exon") %>% dplyr::distinct(hgnc_stable_protein_ID, .keep_all = TRUE), nudge_y = 0.25, fontface = "italic", mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = protein_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = hgnc_stable_protein_ID), .f = function(b1, b2) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
geom_segment(data = a1 %>% dplyr::filter(type == "exon"), colour = "orange", mapping = aes(x = start, xend = end, y = protein_id, yend = protein_id), size = 10),
ggrepel::geom_label_repel(data = a1, nudge_y = 0.15, box.padding = 1, mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = protein_id, label = paste(modified_residue, modified_residue_position, PTM_type, sep = "")))
)
# %>% purrr::splice(
#     .,
#     purrr::map(.x = a1 %>% dplyr::filter(type == "exon") %>% dplyr::rowwise() %>% group_split(),
#                .f = function(b1) {
#                    ggrepel::geom_label_repel(data = b1, colour = "black", angle = 90, force = 5, force_pull = 0, direction = "both", fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = protein_id, label = paste(modified_residue, modified_residue_position, PTM_type, sep = ""))) %>% return
#                } )
#     )
} ) %>% purrr::flatten()
},
# custom_gtf
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")],
.f = function(a2) {
list(
geom_segment(data = a2 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
geom_text(data = a2 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = transcript_id), .f = function(b1, b2) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
geom_segment(data = a2 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
geom_label(data = a2 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
)
} ) %>% purrr::flatten()
},
# user ranges
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_curve(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 2, curvature = -0.25, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_segment(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 5, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible) > 1) {
geom_text(data = tibble_user_ranges_visible[tibble_user_ranges_visible$id != "0", ], colour = "black", nudge_y = 0.25, fontface = "bold", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = id, label = id))
},
if (workshop_reactiveValues_selected_user_range$id %in% tibble_user_ranges_visible$id) {
geom_vline(colour = "red", lty = 2, xintercept = workshop_reactiveValues_selected_user_range$start)
},
if (workshop_reactiveValues_selected_user_range$id %in% tibble_user_ranges_visible$id) {
geom_vline(colour = "red", lty = 2, xintercept = workshop_reactiveValues_selected_user_range$end)
},
# distance annotation
if (length(list_distances_between_user_ranges_and_reference_annotations) > 0) {
purrr::map(
.x = list_distances_between_user_ranges_and_reference_annotations,
.f = function(a3) {
list(
geom_segment(data = a3[a3$ref_vertex_minus_query_vertex != 0, ], colour = "red", arrow = arrow(angle = 30), mapping = aes(x = ref_vertex, xend = query_vertex, y = transcript_id, yend = transcript_id)),
geom_label(data = a3, colour = "red", nudge_y = -0.25, mapping = aes(x = purrr::map2(.x = ref_vertex, .y = query_vertex, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = ref_vertex_minus_query_vertex))
)
} ) %>% purrr::flatten()
},
# FACETS
if (length(list_tibbles_track_features_visible_flattened %>% flatten) > 0 | nrow(tibble_user_ranges_visible) > 0) {
ggplot2::facet_grid(factor(panel, level = workshop_reactiveValues_plot_metadata$list_y_axis_scale %>% names) ~ ., scales = "free_y")
},
# adaptive facet aspect ratio
if (length(list_tibbles_track_features_visible_flattened %>% flatten) > 0 | nrow(tibble_user_ranges_visible) > 0) {
ggh4x::force_panelsizes(rows = workshop_reactiveValues_plot_metadata$vector_number_of_features_per_track %>%
(function(x) {
if (sum(x) != 0) {
return(x/sum(x))
} else {
return(0)}
} ) )
},
# facet-specific brush resizing (y)
if (length(list_tibbles_track_features_visible_flattened %>% flatten) > 0 | nrow(tibble_user_ranges_visible) > 0) {
ggh4x::facetted_pos_scales(
y = workshop_reactiveValues_plot_metadata$list_y_axis_scale %>% purrr::map(~scale_y_discrete(limits = .x, breaks = .x, labels = .x))
)
}
)  %>% purrr::reduce(ggplot2:::`+.gg`)
runApp()
length(global_2_list_tibbles_track_features_visible_flattened[grep(x = names(global_2_list_tibbles_track_features_visible_flattened), pattern = "^Reference protein")]) > 0
length(global_list_distances_between_user_ranges_and_reference_annotations) > 0
purrr::map(
.x = global_list_distances_between_user_ranges_and_reference_annotations,
.f = function(a3) {
list(
geom_segment(data = a3[a3$ref_vertex_minus_query_vertex != 0, ], colour = "red", arrow = arrow(angle = 30), mapping = aes(x = ref_vertex, xend = query_vertex, y = transcript_id, yend = transcript_id)),
geom_label(data = a3, colour = "red", nudge_y = -0.25, mapping = aes(x = purrr::map2(.x = ref_vertex, .y = query_vertex, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = ref_vertex_minus_query_vertex))
)
} ) %>% purrr::flatten()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
global_list_tibbles_track_features_visible_flattened
global_list_tibbles_track_features_visible_flattened_1
runApp()
global_workshop_reactiveValues_plot_metadata
global_workshop_reactiveValues_plot_metadata$list_y_axis_scale
global_workshop_reactiveValues_plot_metadata$list_y_axis_scale  %>% purrr::map(~scale_y_discrete(limits = .x, breaks = .x, labels = .x))
length(global_2_list_tibbles_track_features_visible_flattened[grep(x = names(global_2_list_tibbles_track_features_visible_flattened), pattern = "^Reference transcripts")]) > 0
global_2_list_tibbles_track_features_visible_flattened[grep(x = names(global_2_list_tibbles_track_features_visible_flattened), pattern = "^Reference transcripts")] %>% purrr::map(~.x[mixedorder(.x$hgnc_stable_transcript_ID), ] %>% .$transcript_id %>% unique %>% na.omit %>% rev)
any(global_2_list_tibbles_track_features_visible_flattened$`Reference transcripts: ensembl_104`$transcript_id == "ENST00000613854" )
"ENST00000613854"
global_2_list_tibbles_track_features_visible_flattened$`Reference transcripts: ensembl_104`
global_list_distances_between_user_ranges_and_reference_annotations
global_workshop_plot_brush_ranges
global_2_list_tibbles_track_features_visible_flattened
global_workshop_reactiveValues_plot_metadata$list_y_axis_scale
global_tibble_user_ranges_visible
runApp()
global_tibble_user_ranges_visible
workshop_reactiveValues_plot_metadata$list_y_axis_scale
