}
if (any(output_tibble$left_end_of_VSR == FALSE & output_tibble$right_end_of_VSR == TRUE)) {
output_tibble$effective_VSR_end <- output_tibble[output_tibble$left_end_of_VSR == FALSE & output_tibble$right_end_of_VSR == TRUE, "start"] %>% unlist - 1
}
output_tibble[output_tibble$left_end_of_VSR == TRUE & output_tibble$right_end_of_VSR == TRUE, "logical_is_IR"] <- TRUE
output_tibble[output_tibble$logical_is_IR == TRUE, "left_end_of_VSR"] <- FALSE
output_tibble[output_tibble$logical_is_IR == TRUE, "right_end_of_VSR"] <- FALSE
return(output_tibble)
} )
## MAGNETISE QUERY VSR START
list_magnetised_ref_start_to_query_VSR_start <- magnetise_genome_position_to_ref_starts(query_chr = query_chr, query_coord = query_VSR_start, query_strand = query_strand, tibble_gtf_table = tibble_gtf_table, query_shift = left_query_shift, query_tolerance = left_tolerance, ref_start_shift = 0, return_type = "exon")
list_magnetised_ref_end_to_query_VSR_start <- magnetise_genome_position_to_ref_end(query_chr = query_chr, query_coord = query_VSR_start, query_strand = query_strand, tibble_gtf_table = tibble_gtf_table, query_shift = left_query_shift, query_tolerance = left_tolerance, ref_end_shift = 1, return_type = "exon")
query_VSR_start_magnetised <- c(list_magnetised_ref_start_to_query_VSR_start$magnetised_coord, list_magnetised_ref_end_to_query_VSR_start$magnetised_coord) %>% na.omit %>% .[abs(. - query_VSR_start) == min(abs(. - query_VSR_start))] %>% .[1]
tibble_ref_entries_containing_magnetised_query_VSR_start <- dplyr::bind_rows(list_magnetised_ref_start_to_query_VSR_start$tibble_ref_starts_matched_to_query_coord %>% .[which(.$start == query_VSR_start_magnetised), ], list_magnetised_ref_end_to_query_VSR_start$tibble_ref_ends_matched_to_query_coord %>% .[which((.$end + 1) == query_VSR_start_magnetised), ])
if (length(query_VSR_start_magnetised) == 0 | is.na(query_VSR_start_magnetised) == TRUE) {
query_VSR_start_magnetised <- query_VSR_start
}
## MAGNETISE QUERY VSR END
list_magnetised_ref_start_to_query_VSR_end <- magnetise_genome_position_to_ref_starts(query_chr = query_chr, query_coord = query_VSR_end, query_strand = query_strand, tibble_gtf_table = tibble_gtf_table, query_shift = left_query_shift, query_tolerance = left_tolerance, ref_start_shift = -1, return_type = "exon")
list_magnetised_ref_end_to_query_VSR_end <- magnetise_genome_position_to_ref_end(query_chr = query_chr, query_coord = query_VSR_end, query_strand = query_strand, tibble_gtf_table = tibble_gtf_table, query_shift = left_query_shift, query_tolerance = left_tolerance, ref_end_shift = 0, return_type = "exon")
query_VSR_end_magnetised <- c(list_magnetised_ref_start_to_query_VSR_end$magnetised_coord, list_magnetised_ref_end_to_query_VSR_end$magnetised_coord) %>% na.omit %>% .[abs(. - query_VSR_end) == min(abs(. - query_VSR_end))] %>% .[1]
tibble_ref_entries_containing_magnetised_query_VSR_end <- dplyr::bind_rows(list_magnetised_ref_start_to_query_VSR_end$tibble_ref_starts_matched_to_query_coord %>% .[which((.$start - 1) == query_VSR_end_magnetised), ], list_magnetised_ref_end_to_query_VSR_end$tibble_ref_ends_matched_to_query_coord %>% .[which(.$end == query_VSR_end_magnetised), ])
if (length(query_VSR_end_magnetised) == 0 | is.na(query_VSR_end_magnetised) == TRUE) {
query_VSR_end_magnetised <- query_VSR_end
}
vector_VSR_matched_hgnc_variant_names <- c(tibble_ref_entries_containing_magnetised_query_VSR_start$hgnc_stable_variant_ID, tibble_ref_entries_containing_magnetised_query_VSR_end$hgnc_stable_variant_ID) %>% na.omit %>% unique
tibble_global_VSR_possible_names <- name_a_single_junction(query_chr = query_chr, query_start = query_VSR_start_magnetised, query_end = query_VSR_end_magnetised, query_strand = query_strand, tibble_gtf_table = tibble_gtf_table, return_all_possibilities = TRUE, premagnetised = TRUE, left_query_shift = 0, right_query_shift = 0, left_tolerance = 1, right_tolerance = 1)
## LIS starts, ends and effective VSR starts and ends
list_tibble_exon_start_end_per_LIS_magnetised <- purrr::map(
.x = list_tibble_exon_start_end_per_LIS_A35SS_corrected,
.f = function(a1) {
# DEBUG ###
# a1 <- list_tibble_exon_start_end_per_LIS_A35SS_corrected[[1]]
###########
purrr::map(
.x = a1 %>% rowwise() %>% dplyr::group_split(),
.f = function(b1) {
# DEBUG ###
# b1 <- a1 %>% rowwise() %>% dplyr::group_split() %>% .[[1]]
###########
query_start <- b1$start
query_end <- b1$end
effective_VSR_start <- b1$effective_VSR_start
effective_VSR_end <- b1$effective_VSR_end
## MAGNETISE QUERY START COORD
list_magnetised_ref_start_to_query_start <- magnetise_genome_position_to_ref_starts(query_chr = query_chr, query_coord = query_start, query_strand = query_strand, tibble_gtf_table = tibble_gtf_table, query_shift = left_query_shift, query_tolerance = left_tolerance, ref_start_shift = 0, return_type = "exon")
list_magnetised_ref_end_to_query_start <- magnetise_genome_position_to_ref_end(query_chr = query_chr, query_coord = query_start, query_strand = query_strand, tibble_gtf_table = tibble_gtf_table, query_shift = left_query_shift, query_tolerance = left_tolerance, ref_end_shift = 1, return_type = "exon")
query_start_magnetised <- c(list_magnetised_ref_start_to_query_start$magnetised_coord, list_magnetised_ref_end_to_query_start$magnetised_coord) %>% na.omit %>% .[abs(. - query_start) == min(abs(. - query_start))] %>% .[1]
tibble_ref_entries_containing_magnetised_query_start <- dplyr::bind_rows(list_magnetised_ref_start_to_query_start$tibble_ref_starts_matched_to_query_coord %>% .[which(.$start == query_start_magnetised), ], list_magnetised_ref_end_to_query_start$tibble_ref_ends_matched_to_query_coord %>% .[which((.$end + 1) == query_start_magnetised), ])
if (length(query_start_magnetised) == 0 | is.na(query_start_magnetised) == TRUE) {
query_start_magnetised <- query_start
}
## MAGNETISE QUERY END COORD
list_magnetised_ref_start_to_query_end <- magnetise_genome_position_to_ref_starts(query_chr = query_chr, query_coord = query_end, query_strand = query_strand, tibble_gtf_table = tibble_gtf_table, query_shift = left_query_shift, query_tolerance = left_tolerance, ref_start_shift = -1, return_type = "exon")
list_magnetised_ref_end_to_query_end <- magnetise_genome_position_to_ref_end(query_chr = query_chr, query_coord = query_end, query_strand = query_strand, tibble_gtf_table = tibble_gtf_table, query_shift = left_query_shift, query_tolerance = left_tolerance, ref_end_shift = 0, return_type = "exon")
query_end_magnetised <- c(list_magnetised_ref_start_to_query_end$magnetised_coord, list_magnetised_ref_end_to_query_end$magnetised_coord) %>% na.omit %>% .[abs(. - query_end) == min(abs(. - query_end))] %>% .[1]
tibble_ref_entries_containing_magnetised_query_end <- dplyr::bind_rows(list_magnetised_ref_start_to_query_end$tibble_ref_starts_matched_to_query_coord %>% .[which((.$start - 1) == query_end_magnetised), ], list_magnetised_ref_end_to_query_end$tibble_ref_ends_matched_to_query_coord %>% .[which(.$end == query_end_magnetised), ])
if (length(query_end_magnetised) == 0 | is.na(query_end_magnetised) == TRUE) {
query_end_magnetised <- query_end
}
## MAGNETISE EFFECTIVE VSR START
list_magnetised_ref_start_to_effective_VSR_start <- magnetise_genome_position_to_ref_starts(query_chr = query_chr, query_coord = effective_VSR_start, query_strand = query_strand, tibble_gtf_table = tibble_gtf_table, query_shift = left_query_shift, query_tolerance = left_tolerance, ref_start_shift = 0, return_type = "exon")
list_magnetised_ref_end_to_effective_VSR_start <- magnetise_genome_position_to_ref_end(query_chr = query_chr, query_coord = effective_VSR_start, query_strand = query_strand, tibble_gtf_table = tibble_gtf_table, query_shift = left_query_shift, query_tolerance = left_tolerance, ref_end_shift = 1, return_type = "exon")
effective_VSR_start_magnetised <- c(list_magnetised_ref_start_to_effective_VSR_start$magnetised_coord, list_magnetised_ref_end_to_effective_VSR_start$magnetised_coord) %>% na.omit %>% .[abs(. - effective_VSR_start) == min(abs(. - effective_VSR_start))] %>% .[1]
tibble_ref_entries_containing_magnetised_effective_VSR_start <- dplyr::bind_rows(list_magnetised_ref_start_to_effective_VSR_start$tibble_ref_starts_matched_to_query_coord %>% .[which(.$start == effective_VSR_start_magnetised), ], list_magnetised_ref_end_to_effective_VSR_start$tibble_ref_ends_matched_to_query_coord %>% .[which((.$end + 1) == effective_VSR_start_magnetised), ])
if (length(effective_VSR_start_magnetised) == 0 | is.na(effective_VSR_start_magnetised) == TRUE) {
effective_VSR_start_magnetised <- effective_VSR_start
}
## MAGNETISE EFFECTIVE VSR END
list_magnetised_ref_start_to_effective_VSR_end <- magnetise_genome_position_to_ref_starts(query_chr = query_chr, query_coord = effective_VSR_end, query_strand = query_strand, tibble_gtf_table = tibble_gtf_table, query_shift = left_query_shift, query_tolerance = left_tolerance, ref_start_shift = -1, return_type = "exon")
list_magnetised_ref_end_to_effective_VSR_end <- magnetise_genome_position_to_ref_end(query_chr = query_chr, query_coord = effective_VSR_end, query_strand = query_strand, tibble_gtf_table = tibble_gtf_table, query_shift = left_query_shift, query_tolerance = left_tolerance, ref_end_shift = 0, return_type = "exon")
effective_VSR_end_magnetised <- c(list_magnetised_ref_start_to_effective_VSR_end$magnetised_coord, list_magnetised_ref_end_to_effective_VSR_end$magnetised_coord) %>% na.omit %>% .[abs(. - effective_VSR_end) == min(abs(. - effective_VSR_end))] %>% .[1]
tibble_ref_entries_containing_magnetised_effective_VSR_end <- dplyr::bind_rows(list_magnetised_ref_start_to_effective_VSR_end$tibble_ref_starts_matched_to_query_coord %>% .[which((.$start - 1) == effective_VSR_end_magnetised), ], list_magnetised_ref_end_to_effective_VSR_end$tibble_ref_ends_matched_to_query_coord %>% .[which(.$end == effective_VSR_end_magnetised), ])
if (length(effective_VSR_end_magnetised) == 0 | is.na(effective_VSR_end_magnetised) == TRUE) {
effective_VSR_end_magnetised <- effective_VSR_end
}
## retrieve matched HGNC stable variant IDs
### for each *LIS*, collect all the UNIQUE matched HGNC stable variant IDs.
### if there are non-A3/5SS events that make up an LIS, we will also take into account the VSR-matched ref entries too.
return(b1 %>%
dplyr::mutate(
"query_start_magnetised" = query_start_magnetised,
"query_end_magnetised" = query_end_magnetised,
"effective_VSR_start_magnetised" = effective_VSR_start_magnetised,
"effective_VSR_end_magnetised" = effective_VSR_end_magnetised
) %>% as.list %>%
purrr::splice(
"tibble_ref_entries_containing_magnetised_query_start" = tibble_ref_entries_containing_magnetised_query_start,
"tibble_ref_entries_containing_magnetised_query_end" = tibble_ref_entries_containing_magnetised_query_end,
"tibble_ref_entries_containing_magnetised_effective_VSR_start" = tibble_ref_entries_containing_magnetised_effective_VSR_start,
"tibble_ref_entries_containing_magnetised_effective_VSR_end" = tibble_ref_entries_containing_magnetised_effective_VSR_end
)
)
} ) %>%
return
} )
# retrieve the HGNC stable variant IDs matched to LIS vertices
# list_tibble_exon_start_end_per_LIS_magnetised <- purrr::map(
#     .x = list_tibble_exon_start_end_per_LIS_magnetised,
#     .f = function(a1) {
#
#         # DEBUG ###
#         # a1 <- list_tibble_exon_start_end_per_LIS_magnetised[[1]]
#         ###########
#
#         a1 %>%
#             purrr::splice(
#                 "vector_hgnc_stable_variant_ids_matched_to_LIS_vertices" = list(purrr::map(
#                     .x = a1,
#                     .f = function(b1) {
#
#                         # DEBUG ###
#                         # b1 <- a1[[1]]
#                         ###########
#
#                         if (b1$left_end_of_VSR == TRUE | b1$right_end_of_VSR == TRUE) {
#                             return(b1[c("tibble_ref_entries_containing_magnetised_query_start", "tibble_ref_entries_containing_magnetised_query_end")] %>% purrr::map(~.x$hgnc_stable_variant_ID) %>% unlist %>% unique)
#                         } else {
#                             return(b1[c("tibble_ref_entries_containing_magnetised_query_start", "tibble_ref_entries_containing_magnetised_query_end", "tibble_ref_entries_containing_magnetised_effective_VSR_start", "tibble_ref_entries_containing_magnetised_effective_VSR_end")] %>% purrr::map(~.x$hgnc_stable_variant_ID) %>% unlist %>% unique)
#                         }
#
#
#
#                     } ) %>% unlist %>% unique)
#             ) %>%
#             return
#
#     } )
## get list of the LIS-matched HGNC stable variant IDs
# list_LIS_matched_hgnc_stable_variant_IDs <- purrr::map(
#     .x = list_tibble_exon_start_end_per_LIS_magnetised,
#     .f = ~.x$vector_hgnc_stable_variant_ids_matched_to_LIS_vertices
# )
#
# tally up the HGNC stable variant IDs
# tibble_tally_hgnc_stable_variant_ids_matched_to_VSR_LIS_vertices <- c(list_LIS_matched_hgnc_stable_variant_IDs %>% unlist, vector_VSR_matched_hgnc_variant_names) %>%
#     table %>%
#     as_tibble %>%
#     set_names(nm = c("hgnc_stable_variant_ID", "tally")) %>%
#     dplyr::arrange(desc(tally))
# roll with the most commonly matched transcript IDs for now
# vector_vertex_matched_hgnc_stable_variant_IDs <- tibble_tally_hgnc_stable_variant_ids_matched_to_VSR_LIS_vertices[tibble_tally_hgnc_stable_variant_ids_matched_to_VSR_LIS_vertices$tally == max(tibble_tally_hgnc_stable_variant_ids_matched_to_VSR_LIS_vertices$tally), ] %>% .$hgnc_stable_variant_ID
# NAME THE BODY EXONS ###
## loop through each LIS. in each LIS, loop through each exon and call `name_a_single_exon()`
## variant override with the hgnc_stable_variant_ID tally, if any matches present.
list_LIS_exons_named <- purrr::map2(
.x = list_tibble_exon_start_end_per_LIS_magnetised,
.y = 1:length(list_tibble_exon_start_end_per_LIS_magnetised),
.f = function(a1, a2) {
# print(a2)
# DEBUG ###
# a1 <- list_tibble_exon_start_end_per_LIS_magnetised[[1]]
###########
purrr::map2(
.x = a1,
.y = 1:length(a1),
.f = function(b1, b2) {
# print(b2)
# DEBUG ###
# b1 <- a1[[2]]
###########
if (b1$left_end_of_VSR == TRUE | b1$right_end_of_VSR == TRUE) {
# find free end
free_A3_5SS_vertex <- setdiff(c(b1$query_start_magnetised, b1$query_end_magnetised), c(b1$effective_VSR_start, b1$effective_VSR_end, b1$effective_VSR_start_magnetised, b1$effective_VSR_end_magnetised) %>% .[duplicated(.)])
}
b1 %>%
purrr::splice(
"exonic_matches" = if (b1$left_end_of_VSR == FALSE & b1$right_end_of_VSR == FALSE) {
name_a_single_exon(query_chr = b1$chr, query_start = b1$query_start_magnetised, query_end = b1$query_end_magnetised, query_strand = b1$strand, tibble_gtf_table = tibble_gtf_table, return_all_possibilities = TRUE, premagnetised = TRUE, left_query_shift = left_query_shift, right_query_shift = right_query_shift, left_tolerance = left_tolerance, right_tolerance = right_tolerance) %>%
tibble::add_column(
"query_start" = b1$query_start_magnetised,
"query_end" = b1$query_end_magnetised
)
},
"effective_VSR_matches" = if (b1$left_end_of_VSR == TRUE | b1$right_end_of_VSR == TRUE) {
name_a_single_junction(query_chr = b1$chr, query_start = b1$effective_VSR_start_magnetised, query_end = b1$effective_VSR_end_magnetised, query_strand = query_strand, tibble_gtf_table, return_all_possibilities = TRUE, premagnetised = TRUE, left_query_shift = left_query_shift, right_query_shift = right_query_shift, left_tolerance = tibble_gtf_table, right_tolerance = right_tolerance) %>%
tibble::add_column(
"query_start" = b1$effective_VSR_start,
"query_end" = b1$effective_VSR_end
)
},
"ref_exons_matched_to_free_A3_5SS_vertex" = if (b1$left_end_of_VSR == TRUE | b1$right_end_of_VSR == TRUE) {
dplyr::bind_rows(
magnetise_genome_position_to_ref_end(query_chr = b1$chr, query_coord = free_A3_5SS_vertex, query_strand = b1$strand, tibble_gtf_table = tibble_gtf_table, query_shift = 0, query_tolerance = 0, ref_end_shift = 0, return_type = "exon") %>% .$tibble_ref_ends_matched_to_query_coord,
magnetise_genome_position_to_ref_starts(query_chr = b1$chr, query_coord = free_A3_5SS_vertex, query_strand = b1$strand, tibble_gtf_table = tibble_gtf_table, query_shift = 0, query_tolerance = 0, ref_start_shift = 0, return_type = "exon") %>% .$tibble_ref_ends_matched_to_query_coord
)
}
) %>% return
} ) %>% return
} )
list_LIS_exons_named
# NAME EACH LIS and combine with VSR data. ###
list_LIS_VSR_named_records <- purrr::imap(
.x = list_LIS_exons_named,
.f = function(a1, a2) {
print(a2)
# DEBUG ###
# a1 <- list_LIS_exons_named[[1]]
###########
if ( a1[purrr::map(.x = a1, .f = ~is.null(.x$exonic_matches) == FALSE) %>% unlist] %>% length > 0 ) {
# deal with exonic matches.
tibble_LIS_exonic_matches <- purrr::map2(
.x = a1[purrr::map(.x = a1, .f = ~is.null(.x$exonic_matches) == FALSE) %>% unlist],
.y = 1:length(a1[purrr::map(.x = a1, .f = ~is.null(.x$exonic_matches) == FALSE) %>% unlist]),
.f = function(b1, b2) {
# DEBUG ###
# b1 <- a1[[1]]
# b2 <- 1:length(a1) %>% .[[1]]
###########
# add the exon numbers within the LIS and rbind into long tibble
if ( is.null(b1$exonic_matches) == FALSE ) {
long_tibble_named_exons_in_LIS <- b1$exonic_matches %>%
dplyr::mutate("number_in_LIS" = b2)
} else if ( is.null(b1$exonic_matches) == TRUE ) {
long_tibble_named_exons_in_LIS <- tibble()
}
} ) %>% dplyr::bind_rows() %>%
dplyr::group_by(variant_ID_slot) %>%
dplyr::mutate("number_of_LIS_exons_matched_to_variant" = n(),
"match_type" = "exonic")
} else {
tibble_LIS_exonic_matches <- tibble()
}
# deal with A3/5SS matches.
# the A3/5SS junction is the effective VSR and everything splits up.
# the effective VSR is the same for the ENTIRE LIS, because the A3/5SS event has already defined the bounds of the VSR.
# if there are any A3/5SS events, then we match them together with the other exons in the LIS.
# if not, then continue with the global VSR as usual.
if ( any(purrr::map(.x = a1, .f = ~c(.x$left_end_of_VSR, .x$right_end_of_VSR)) %>% unlist == TRUE) ) {
tibble_A35SS_effective_VSR_matches <- a1[[1]]$effective_VSR_matches %>%
dplyr::mutate("number_in_LIS" = if ( nrow(tibble_LIS_exonic_matches) > 0 ) {max(tibble_LIS_exonic_matches$number_in_LIS) + 1} else {1},
"vector_vertex_differences" = `query_start_match_distance` + `query_end_match_distance`,
"number_of_ref_elements_to_describe_exon" = 0,
"match_type" = "effective_VSR")
tibble_LIS_match_entries <- dplyr::bind_rows(tibble_LIS_exonic_matches, tibble_A35SS_effective_VSR_matches)
# feed into global VSR if there are no A3/5SS events
} else if ( all(purrr::map(.x = a1, .f = ~c(.x$left_end_of_VSR, .x$right_end_of_VSR)) %>% unlist == FALSE) ) {
tibble_LIS_match_entries <- tibble_LIS_exonic_matches
}
# for each LIS match entry, subset by matched HGNC stable variant ID
list_whole_LIS_named_all_matched_exons_only_split_by_hgnc_stable_variant_ID <- tibble_LIS_match_entries %>% ungroup() %>% dplyr::group_split(variant_ID_slot) %>% set_names(nm = purrr::map(.x = ., .f = ~.x$variant_ID_slot %>% unique) %>% unlist)
# add in the VSR matches for each HGNC stable variant ID.
# we only use a common HGNC stable variant ID for VSRs ONLY if there is at least one LIS which has all exons matched to the HGNC stable variant ID
# we take the first match with the lowest delta
list_VSR_possible_names_split_by_hgnc_stable_variant_ID <- tibble_global_VSR_possible_names %>% dplyr::group_split(variant_ID_slot) %>% set_names(nm = purrr::map(.x = ., .f = ~.x$variant_ID_slot %>% unique) %>% unlist)
# commonise the lists
vector_hgnc_stable_variant_IDs_in_common <- intersect(list_whole_LIS_named_all_matched_exons_only_split_by_hgnc_stable_variant_ID %>% names, list_VSR_possible_names_split_by_hgnc_stable_variant_ID %>% names)
if (length(vector_hgnc_stable_variant_IDs_in_common) > 0) {
list_named_LIS_and_VSR_split_by_hgnc_stable_variant_ID <- purrr::map2(
.x = list_whole_LIS_named_all_matched_exons_only_split_by_hgnc_stable_variant_ID[vector_hgnc_stable_variant_IDs_in_common],
.y = list_VSR_possible_names_split_by_hgnc_stable_variant_ID[vector_hgnc_stable_variant_IDs_in_common],
.f = ~list(
"LIS" = .x,
"VSR" = .y)
)
# find the transcript variant with the lowest delta
list_LIS_VSR_record <- list_named_LIS_and_VSR_split_by_hgnc_stable_variant_ID %>%
(function(x) {
# DEBUG ###
# x <- list_named_LIS_and_VSR_split_by_hgnc_stable_variant_ID
###########
# whole LIS matches take priority
vector_metric <- purrr::map(.x = x, .f = ~nrow(.x$LIS)) %>% unlist
list_output <- x[which(vector_metric == max(vector_metric))]
# full matches take priority
vector_metric <- purrr::map(.x = list_output, .f = ~which(c(.x$LIS$flag_is_exact_match, .x$VSR$flag_is_exact_match) == "FULL") %>% length) %>% unlist
list_output <- list_output[which(vector_metric == max(vector_metric))]
# followed by half matches
vector_metric <- purrr::map(.x = list_output, .f = ~which(c(.x$LIS$flag_is_exact_match, .x$VSR$flag_is_exact_match) == "HALF") %>% length) %>% unlist
list_output <- list_output[which(vector_metric == max(vector_metric))]
# followed by deltas
vector_metric <- purrr::map(.x = list_output, .f = ~c(.x$LIS$vector_vertex_differences, .x$VSR$query_start_match_distance, .x$VSR$query_end_match_distance) %>% sum) %>% unlist
list_output <- list_output[which(vector_metric == min(vector_metric))]
# followed by number of ref exons needed to describe
vector_metric <- purrr::map(.x = list_output, .f = ~c(.x$LIS$number_of_ref_elements_to_describe_exon) %>% sum) %>% unlist
list_output <- list_output[which(vector_metric == min(vector_metric))]
# and finally lowest hgnc_stable+_variant_ID
list_output <- list_output[names(list_output) == (mixedsort(names(list_output)) %>% .[1])] %>% .[[1]]
return(list_output)
} )
} else {
list_LIS_VSR_record <- list()
}
# organise LIS matching without taking into account the global VSR.
# whole LIS matches take priority
if ( length(list_whole_LIS_named_all_matched_exons_only_split_by_hgnc_stable_variant_ID) > 0 ) {
# find the transcript variant with the lowest delta
tibble_LIS_record <- list_whole_LIS_named_all_matched_exons_only_split_by_hgnc_stable_variant_ID %>%
(function(x) {
# DEBUG ###
# x <- list_whole_LIS_named_all_matched_exons_only_split_by_hgnc_stable_variant_ID
###########
# whole LIS matches take priority
vector_metric <- purrr::map(.x = x, .f = ~nrow(.x)) %>% unlist
list_output <- x[which(vector_metric == max(vector_metric))]
# full matches take priority
vector_metric <- purrr::map(.x = list_output, .f = ~which(c(.x$flag_is_exact_match) == "FULL") %>% length) %>% unlist
list_output <- list_output[which(vector_metric == max(vector_metric))]
# followed by half matches
vector_metric <- purrr::map(.x = list_output, .f = ~which(c(.x$flag_is_exact_match) == "HALF") %>% length) %>% unlist
list_output <- list_output[which(vector_metric == max(vector_metric))]
# followed by deltas
vector_metric <- purrr::map(.x = list_output, .f = ~.x$vector_vertex_differences %>% sum) %>% unlist
list_output <- list_output[which(vector_metric == min(vector_metric))]
# followed by number of ref exons needed to describe
vector_metric <- purrr::map(.x = list_output, .f = ~.x$number_of_ref_elements_to_describe_exon %>% sum) %>% unlist
list_output <- list_output[which(vector_metric == min(vector_metric))]
# and finally lowest hgnc_stable+_variant_ID
list_output <- list_output[names(list_output) == (mixedsort(names(list_output)) %>% .[1])]
return(list_output)
} ) %>% .[[1]]
# if no ref matches for the entire LIS, then match each LIS exon individually
} else {
# generate a tibble that records the HGNC stable variant ID, the exon entry and the LIS number.
tibble_LIS_record <- tibble(
"variant_ID_slot" = character(),
"exon_slot" = character(),
"number_in_LIS" = numeric()
)
}
if (length(tibble_LIS_record$number_in_LIS) < max(tibble_LIS_match_entries$number_in_LIS)) {
tibble_LIS_record <- tibble_LIS_match_entries %>%
dplyr::ungroup() %>%
dplyr::group_split(number_in_LIS) %>%
purrr::map(
.f = ~.x %>%
# full matches take priority
.[length(which(.$flag_is_exact_match == "FULL")) == max(length(which(.$flag_is_exact_match == "FULL"))), ] %>%
# followed by half matches
.[length(which(.$flag_is_exact_match == "HALF")) == max(length(which(.$flag_is_exact_match == "HALF"))), ] %>%
# followed by deltas
.[.$vector_vertex_differences == min(.$vector_vertex_differences), ] %>%
# followed by number of ref exons needed to describe
.[.$number_of_ref_elements_to_describe_exon == min(.$number_of_ref_elements_to_describe_exon), ] %>%
# and finally lowest hgnc_stable+_variant_ID
.[.$variant_ID_slot == (.$variant_ID_slot %>% mixedsort %>% .[1]), ]
) %>% dplyr::bind_rows() %>% dplyr::bind_rows(.[!.$number_in_LIS %in% .$number_in_LIS, ])
}
return(list(
"list_LIS_VSR_record" = list_LIS_VSR_record,
"tibble_LIS_record" = tibble_LIS_record
) )
} )
list_LIS_VSR_named_records
# finalise matching and names
vector_segments_with_global_VSR_authority <- which(purrr::map(
.x = list_LIS_VSR_named_records,
.f = ~.x$list_LIS_VSR_record %>% length
) %>% unlist > 0)
vector_segments_with_global_VSR_authority
# if there is VSR authority, then we extract the LIS/VSR combinations and go thru the list once again.
if (length(vector_segments_with_global_VSR_authority) > 0) {
tibble_global_VSR_authority <- purrr::map(
.x = list_LIS_VSR_named_records[vector_segments_with_global_VSR_authority],
.f = ~tibble(
"variant_ID_slot" = .x$list_LIS_VSR_record$VSR$variant_ID_slot,
"full_match_count" = length(which(.x$list_LIS_VSR_record$VSR$flag_is_exact_match == "FULL")) + length(which(.x$list_LIS_VSR_record$LIS$flag_is_exact_match == "FULL")),
"half_match_count" = length(which(.x$list_LIS_VSR_record$VSR$flag_is_exact_match == "HALF")) + length(which(.x$list_LIS_VSR_record$LIS$flag_is_exact_match == "HALF")),
"delta_sum" = c(.x$list_LIS_VSR_record$VSR$query_start_match_distance, .x$list_LIS_VSR_record$VSR$query_end_match_distance, .x$list_LIS_VSR_record$LIS$vector_vertex_differences) %>% sum,
"number_of_ref_elements_sum" = .x$list_LIS_VSR_record$LIS$number_of_ref_elements_to_describe_exon %>% sum
)
) %>% dplyr::bind_rows()
global_VSR_variant_ID_slot <- tibble_global_VSR_authority %>%
.[.$full_match_count == max(.$full_match_count), ] %>%
.[.$half_match_count == max(.$half_match_count), ] %>%
.[.$delta_sum == min(.$delta_sum), ] %>%
.[.$number_of_ref_elements_sum == min(.$number_of_ref_elements_sum), ] %>%
.[.$variant_ID_slot == (mixedsort(.$variant_ID_slot %>% .[1])), ] %>%
.$variant_ID_slot %>% .[1]
# retrieve list indices of LISs which have VSR override as a result
# these are the LISs which have been matched to the same hgnc_stable_variant_ID as the VSR variant ID
logical_indices_LIS_with_global_VSR_override <- (1:length(list_LIS_VSR_named_records)) %in% (vector_segments_with_global_VSR_authority[purrr::map(.x = list_LIS_VSR_named_records[vector_segments_with_global_VSR_authority], .f = ~.x$list_LIS_VSR_record$VSR$variant_ID_slot == global_VSR_variant_ID_slot) %>% unlist])
# retrieve VSR tibble from the first matching VSR table in the list
tibble_global_VSR_final_naming <- list_LIS_VSR_named_records[logical_indices_LIS_with_global_VSR_override][[1]]$list_LIS_VSR_record$VSR
if (tibble_global_VSR_final_naming$matched_strand == "+") {
global_VSR_left_slot <- tibble_global_VSR_final_naming$exon_slot_query_start
global_VSR_right_slot <- tibble_global_VSR_final_naming$exon_slot_query_end
} else if (tibble_global_VSR_final_naming$matched_strand == "-") {
global_VSR_left_slot <- tibble_global_VSR_final_naming$exon_slot_query_end
global_VSR_right_slot <- tibble_global_VSR_final_naming$exon_slot_query_start
}
# if no VSR authority, then VSR and LISs will be independently named
} else if (length(vector_segments_with_global_VSR_authority) == 0) {
logical_indices_LIS_with_global_VSR_override <- FALSE %>% rep(times = length(list_LIS_VSR_named_records))
tibble_global_VSR_final_naming <- tibble_global_VSR_possible_names %>%
.[if (any(.$flag_is_exact_match == "FULL")) {.$flag_is_exact_match == "FULL"} else {TRUE}, ] %>%
.[if (any(.$flag_is_exact_match == "HALF")) {.$flag_is_exact_match == "HALF"} else {TRUE}, ] %>%
.[(.$query_start_match_distance + .$query_end_match_distance) == min(.$query_start_match_distance + .$query_end_match_distance), ] %>%
.[.$variant_ID_slot == (mixedsort(.$variant_ID_slot %>% .[1])), ]
global_VSR_variant_ID_slot <- tibble_global_VSR_final_naming$variant_ID_slot %>% .[1]
if (tibble_global_VSR_final_naming$matched_strand == "+") {
global_VSR_left_slot <- tibble_global_VSR_final_naming$exon_slot_query_start
global_VSR_right_slot <- tibble_global_VSR_final_naming$exon_slot_query_end
} else if (tibble_global_VSR_final_naming$matched_strand == "-") {
global_VSR_left_slot <- tibble_global_VSR_final_naming$exon_slot_query_end
global_VSR_right_slot <- tibble_global_VSR_final_naming$exon_slot_query_start
}
}
global_VSR_variant_ID_slot
global_VSR_left_slot
global_VSR_right_slot
length(vector_segments_with_global_VSR_authority) > 0
tibble_global_VSR_final_naming
logical_indices_LIS_with_global_VSR_override
list_LIS_VSR_named_records[logical_indices_LIS_with_global_VSR_override][[1]]
# DEBUG ###
a1 <- list_LIS_exons_named[[1]]
a1
if ( a1[purrr::map(.x = a1, .f = ~is.null(.x$exonic_matches) == FALSE) %>% unlist] %>% length > 0 ) {
# deal with exonic matches.
tibble_LIS_exonic_matches <- purrr::map2(
.x = a1[purrr::map(.x = a1, .f = ~is.null(.x$exonic_matches) == FALSE) %>% unlist],
.y = 1:length(a1[purrr::map(.x = a1, .f = ~is.null(.x$exonic_matches) == FALSE) %>% unlist]),
.f = function(b1, b2) {
# DEBUG ###
# b1 <- a1[[1]]
# b2 <- 1:length(a1) %>% .[[1]]
###########
# add the exon numbers within the LIS and rbind into long tibble
if ( is.null(b1$exonic_matches) == FALSE ) {
long_tibble_named_exons_in_LIS <- b1$exonic_matches %>%
dplyr::mutate("number_in_LIS" = b2)
} else if ( is.null(b1$exonic_matches) == TRUE ) {
long_tibble_named_exons_in_LIS <- tibble()
}
} ) %>% dplyr::bind_rows() %>%
dplyr::group_by(variant_ID_slot) %>%
dplyr::mutate("number_of_LIS_exons_matched_to_variant" = n(),
"match_type" = "exonic")
} else {
tibble_LIS_exonic_matches <- tibble()
}
tibble_LIS_exonic_matches
# deal with A3/5SS matches.
# the A3/5SS junction is the effective VSR and everything splits up.
# the effective VSR is the same for the ENTIRE LIS, because the A3/5SS event has already defined the bounds of the VSR.
# if there are any A3/5SS events, then we match them together with the other exons in the LIS.
# if not, then continue with the global VSR as usual.
if ( any(purrr::map(.x = a1, .f = ~c(.x$left_end_of_VSR, .x$right_end_of_VSR)) %>% unlist == TRUE) ) {
tibble_A35SS_effective_VSR_matches <- a1[[1]]$effective_VSR_matches %>%
dplyr::mutate("number_in_LIS" = if ( nrow(tibble_LIS_exonic_matches) > 0 ) {max(tibble_LIS_exonic_matches$number_in_LIS) + 1} else {1},
"vector_vertex_differences" = `query_start_match_distance` + `query_end_match_distance`,
"number_of_ref_elements_to_describe_exon" = 0,
"match_type" = "effective_VSR")
tibble_LIS_match_entries <- dplyr::bind_rows(tibble_LIS_exonic_matches, tibble_A35SS_effective_VSR_matches)
# feed into global VSR if there are no A3/5SS events
} else if ( all(purrr::map(.x = a1, .f = ~c(.x$left_end_of_VSR, .x$right_end_of_VSR)) %>% unlist == FALSE) ) {
tibble_LIS_match_entries <- tibble_LIS_exonic_matches
}
# for each LIS match entry, subset by matched HGNC stable variant ID
list_whole_LIS_named_all_matched_exons_only_split_by_hgnc_stable_variant_ID <- tibble_LIS_match_entries %>% ungroup() %>% dplyr::group_split(variant_ID_slot) %>% set_names(nm = purrr::map(.x = ., .f = ~.x$variant_ID_slot %>% unique) %>% unlist)
# add in the VSR matches for each HGNC stable variant ID.
# we only use a common HGNC stable variant ID for VSRs ONLY if there is at least one LIS which has all exons matched to the HGNC stable variant ID
# we take the first match with the lowest delta
list_VSR_possible_names_split_by_hgnc_stable_variant_ID <- tibble_global_VSR_possible_names %>% dplyr::group_split(variant_ID_slot) %>% set_names(nm = purrr::map(.x = ., .f = ~.x$variant_ID_slot %>% unique) %>% unlist)
# for each LIS match entry, subset by matched HGNC stable variant ID
list_whole_LIS_named_all_matched_exons_only_split_by_hgnc_stable_variant_ID <- tibble_LIS_match_entries %>% ungroup() %>% dplyr::group_split(variant_ID_slot) %>% set_names(nm = purrr::map(.x = ., .f = ~.x$variant_ID_slot %>% unique) %>% unlist)
# add in the VSR matches for each HGNC stable variant ID.
# we only use a common HGNC stable variant ID for VSRs ONLY if there is at least one LIS which has all exons matched to the HGNC stable variant ID
# we take the first match with the lowest delta
list_VSR_possible_names_split_by_hgnc_stable_variant_ID <- tibble_global_VSR_possible_names %>% dplyr::group_split(variant_ID_slot) %>% set_names(nm = purrr::map(.x = ., .f = ~.x$variant_ID_slot %>% unique) %>% unlist)
# commonise the lists
vector_hgnc_stable_variant_IDs_in_common <- intersect(list_whole_LIS_named_all_matched_exons_only_split_by_hgnc_stable_variant_ID %>% names, list_VSR_possible_names_split_by_hgnc_stable_variant_ID %>% names)
if (length(vector_hgnc_stable_variant_IDs_in_common) > 0) {
list_named_LIS_and_VSR_split_by_hgnc_stable_variant_ID <- purrr::map2(
.x = list_whole_LIS_named_all_matched_exons_only_split_by_hgnc_stable_variant_ID[vector_hgnc_stable_variant_IDs_in_common],
.y = list_VSR_possible_names_split_by_hgnc_stable_variant_ID[vector_hgnc_stable_variant_IDs_in_common],
.f = ~list(
"LIS" = .x,
"VSR" = .y)
)
# find the transcript variant with the lowest delta
list_LIS_VSR_record <- list_named_LIS_and_VSR_split_by_hgnc_stable_variant_ID %>%
(function(x) {
# DEBUG ###
# x <- list_named_LIS_and_VSR_split_by_hgnc_stable_variant_ID
###########
# whole LIS matches take priority
vector_metric <- purrr::map(.x = x, .f = ~nrow(.x$LIS)) %>% unlist
list_output <- x[which(vector_metric == max(vector_metric))]
# full matches take priority
vector_metric <- purrr::map(.x = list_output, .f = ~which(c(.x$LIS$flag_is_exact_match, .x$VSR$flag_is_exact_match) == "FULL") %>% length) %>% unlist
list_output <- list_output[which(vector_metric == max(vector_metric))]
# followed by half matches
vector_metric <- purrr::map(.x = list_output, .f = ~which(c(.x$LIS$flag_is_exact_match, .x$VSR$flag_is_exact_match) == "HALF") %>% length) %>% unlist
list_output <- list_output[which(vector_metric == max(vector_metric))]
# followed by deltas
vector_metric <- purrr::map(.x = list_output, .f = ~c(.x$LIS$vector_vertex_differences, .x$VSR$query_start_match_distance, .x$VSR$query_end_match_distance) %>% sum) %>% unlist
list_output <- list_output[which(vector_metric == min(vector_metric))]
# followed by number of ref exons needed to describe
vector_metric <- purrr::map(.x = list_output, .f = ~c(.x$LIS$number_of_ref_elements_to_describe_exon) %>% sum) %>% unlist
list_output <- list_output[which(vector_metric == min(vector_metric))]
# and finally lowest hgnc_stable+_variant_ID
list_output <- list_output[names(list_output) == (mixedsort(names(list_output)) %>% .[1])] %>% .[[1]]
return(list_output)
} )
} else {
list_LIS_VSR_record <- list()
}
list_LIS_VSR_record
list_VSR_possible_names_split_by_hgnc_stable_variant_ID
a1
View(tibble_ref_gtf)
a1
a1[[1]]$exonic_matches
a1[[1]]$exonic_matches %>% print(width = Inf, n = Inf)
a1[[1]]$exonic_matches %>% print(width = Inf, n = Inf) %>% .[mixedorder(.$variant_ID_slot), ]
a1[[1]]$exonic_matches %>% .[mixedorder(.$variant_ID_slot), ] %>% print(width = Inf, n = Inf)
View(tibble_ref_gtf)
View(tibble_ref_gtf[tibble_ref_gtf$gene_name == "TBCE", ])
View(tibble_ref_gtf[which(tibble_ref_gtf$gene_name == "TBCE"), ])
tibble_ref_gtf[which(tibble_ref_gtf$gene_name == "TBCE"), ] %>% .$gene_id %>% unique
