# # custom_gtf
# if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")]) > 0) {
#
#     purrr::map(
#         .x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")],
#         .f = function(a2) {
#
#             list(
#
#                 geom_segment(data = a2 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
#                 geom_text(data = a2 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = transcript_id), .f = function(b1, b2) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
#                 geom_segment(data = a2 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
#                 geom_label(data = a2 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
#
#             )
#
#         } ) %>% purrr::flatten()
#
# },
#
# # user ranges
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_curve(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 2, curvature = -0.25, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_segment(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 5, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible) > 1) {
geom_text(data = tibble_user_ranges_visible[tibble_user_ranges_visible$id != "0", ], colour = "black", nudge_y = 0.25, fontface = "bold", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = id, label = id))
},
# if (workshop_list_selected_user_range$id %in% tibble_user_ranges_visible$id) {
#     geom_vline(colour = "red", lty = 2, xintercept = workshop_list_selected_user_range$start)
# },
# if (workshop_list_selected_user_range$id %in% tibble_user_ranges_visible$id) {
#     geom_vline(colour = "red", lty = 2, xintercept = workshop_list_selected_user_range$end)
# },
#
# # distance annotation
# if (length(list_distances_between_user_ranges_and_reference_annotations) > 0) {
#
#     purrr::map(
#         .x = list_distances_between_user_ranges_and_reference_annotations,
#         .f = function(a3) {
#
#             list(
#
#                 geom_segment(data = a3, colour = "red", arrow = arrow(angle = 45), mapping = aes(x = ref_vertex, xend = query_vertex, y = transcript_id, yend = transcript_id)),
#                 geom_label(data = a3, colour = "red", nudge_y = -0.25, mapping = aes(x = purrr::map2(.x = ref_vertex, .y = query_vertex, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = ref_vertex_minus_query_vertex))
#
#             )
#
#         } ) %>% purrr::flatten()
#
# },
#
# # these mark the original viewing window
# geom_vline(colour = "green", lty = 2, xintercept = workshop_list_current_plot_range$start),
# geom_vline(colour = "green", lty = 2, xintercept = workshop_list_current_plot_range$end),
#
# # adaptive facet aspect ratio
# ggh4x::force_panelsizes(rows = workshop_list_plot_metadata$vector_number_of_features_per_track %>%
#                             (function(x) {
#                                 if (sum(x) != 0) {
#                                     return(x/sum(x))
#                                     } else {
#                                         return(0)}
#                                 } ) ),
# facet-specific brush resizing (y)
ggh4x::facetted_pos_scales(
y = workshop_list_plot_metadata$list_y_axis_scale %>% purrr::map(~scale_y_discrete(limits = .x, breaks = .x, labels = .x))
),
# brush resizing (x)
# coord_cartesian(xlim = workshop_plot_brush_ranges$x, ylim = workshop_plot_brush_ranges$y),
theme_bw(),
theme(text = element_text(family = "Helvetica"))
)  %>% purrr::reduce(ggplot2:::`+.gg`)
ggplot_final_plot
# CREATE GGPLOT
ggplot_final_plot <- list(
ggplot(),
ggplot2::facet_grid(panel ~ ., scales = "free_y")) %>%
purrr::splice(
# reference_gtf
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference GTF")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference GTF")],
.f = function(a1) {
list(
geom_segment(data = a1 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
geom_text(data = a1 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = hgnc_stable_variant_ID, "b3" = transcript_version), .f = function(b1, b2, b3) {if (b1 == "+") {paste("> > > > > > ", b2, if (is.na(b3) == FALSE) {"."}, if (is.na(b3) == FALSE) {b3}, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, if (is.na(b3) == FALSE) {"."}, if (is.na(b3) == FALSE) {b3}, " < < < < < <", sep = "")} else {paste(b2, if (is.na(b3) == FALSE) {"."}, if (is.na(b3)) {b3}, sep = "")} } ) %>% unlist)),
geom_segment(data = a1 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
geom_label(data = a1 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
)
} ) %>% purrr::flatten()
},
# # custom_gtf
# if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")]) > 0) {
#
#     purrr::map(
#         .x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")],
#         .f = function(a2) {
#
#             list(
#
#                 geom_segment(data = a2 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
#                 geom_text(data = a2 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = transcript_id), .f = function(b1, b2) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
#                 geom_segment(data = a2 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
#                 geom_label(data = a2 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
#
#             )
#
#         } ) %>% purrr::flatten()
#
# },
#
# # user ranges
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_curve(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 2, curvature = -0.25, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_segment(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 5, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible) > 1) {
geom_text(data = tibble_user_ranges_visible[tibble_user_ranges_visible$id != "0", ], colour = "black", nudge_y = 0.25, fontface = "bold", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = id, label = id))
},
if (workshop_list_selected_user_range$id %in% tibble_user_ranges_visible$id) {
geom_vline(colour = "red", lty = 2, xintercept = workshop_list_selected_user_range$start)
},
if (workshop_list_selected_user_range$id %in% tibble_user_ranges_visible$id) {
geom_vline(colour = "red", lty = 2, xintercept = workshop_list_selected_user_range$end)
},
#
# # distance annotation
# if (length(list_distances_between_user_ranges_and_reference_annotations) > 0) {
#
#     purrr::map(
#         .x = list_distances_between_user_ranges_and_reference_annotations,
#         .f = function(a3) {
#
#             list(
#
#                 geom_segment(data = a3, colour = "red", arrow = arrow(angle = 45), mapping = aes(x = ref_vertex, xend = query_vertex, y = transcript_id, yend = transcript_id)),
#                 geom_label(data = a3, colour = "red", nudge_y = -0.25, mapping = aes(x = purrr::map2(.x = ref_vertex, .y = query_vertex, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = ref_vertex_minus_query_vertex))
#
#             )
#
#         } ) %>% purrr::flatten()
#
# },
#
# # these mark the original viewing window
# geom_vline(colour = "green", lty = 2, xintercept = workshop_list_current_plot_range$start),
# geom_vline(colour = "green", lty = 2, xintercept = workshop_list_current_plot_range$end),
#
# # adaptive facet aspect ratio
# ggh4x::force_panelsizes(rows = workshop_list_plot_metadata$vector_number_of_features_per_track %>%
#                             (function(x) {
#                                 if (sum(x) != 0) {
#                                     return(x/sum(x))
#                                     } else {
#                                         return(0)}
#                                 } ) ),
# facet-specific brush resizing (y)
ggh4x::facetted_pos_scales(
y = workshop_list_plot_metadata$list_y_axis_scale %>% purrr::map(~scale_y_discrete(limits = .x, breaks = .x, labels = .x))
),
# brush resizing (x)
# coord_cartesian(xlim = workshop_plot_brush_ranges$x, ylim = workshop_plot_brush_ranges$y),
theme_bw(),
theme(text = element_text(family = "Helvetica"))
)  %>% purrr::reduce(ggplot2:::`+.gg`)
ggplot_final_plot
# CREATE GGPLOT
ggplot_final_plot <- list(
ggplot(),
ggplot2::facet_grid(panel ~ ., scales = "free_y")) %>%
purrr::splice(
# reference_gtf
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference GTF")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference GTF")],
.f = function(a1) {
list(
geom_segment(data = a1 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
geom_text(data = a1 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = hgnc_stable_variant_ID, "b3" = transcript_version), .f = function(b1, b2, b3) {if (b1 == "+") {paste("> > > > > > ", b2, if (is.na(b3) == FALSE) {"."}, if (is.na(b3) == FALSE) {b3}, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, if (is.na(b3) == FALSE) {"."}, if (is.na(b3) == FALSE) {b3}, " < < < < < <", sep = "")} else {paste(b2, if (is.na(b3) == FALSE) {"."}, if (is.na(b3)) {b3}, sep = "")} } ) %>% unlist)),
geom_segment(data = a1 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
geom_label(data = a1 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
)
} ) %>% purrr::flatten()
},
# custom_gtf
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")],
.f = function(a2) {
list(
geom_segment(data = a2 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
geom_text(data = a2 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = transcript_id), .f = function(b1, b2) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
geom_segment(data = a2 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
geom_label(data = a2 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
)
} ) %>% purrr::flatten()
},
# user ranges
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_curve(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 2, curvature = -0.25, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_segment(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 5, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible) > 1) {
geom_text(data = tibble_user_ranges_visible[tibble_user_ranges_visible$id != "0", ], colour = "black", nudge_y = 0.25, fontface = "bold", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = id, label = id))
},
if (workshop_list_selected_user_range$id %in% tibble_user_ranges_visible$id) {
geom_vline(colour = "red", lty = 2, xintercept = workshop_list_selected_user_range$start)
},
if (workshop_list_selected_user_range$id %in% tibble_user_ranges_visible$id) {
geom_vline(colour = "red", lty = 2, xintercept = workshop_list_selected_user_range$end)
},
# distance annotation
if (length(list_distances_between_user_ranges_and_reference_annotations) > 0) {
purrr::map(
.x = list_distances_between_user_ranges_and_reference_annotations,
.f = function(a3) {
list(
geom_segment(data = a3, colour = "red", arrow = arrow(angle = 45), mapping = aes(x = ref_vertex, xend = query_vertex, y = transcript_id, yend = transcript_id)),
geom_label(data = a3, colour = "red", nudge_y = -0.25, mapping = aes(x = purrr::map2(.x = ref_vertex, .y = query_vertex, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = ref_vertex_minus_query_vertex))
)
} ) %>% purrr::flatten()
},
# these mark the original viewing window
geom_vline(colour = "green", lty = 2, xintercept = workshop_list_current_plot_range$start),
geom_vline(colour = "green", lty = 2, xintercept = workshop_list_current_plot_range$end),
# adaptive facet aspect ratio
ggh4x::force_panelsizes(rows = workshop_list_plot_metadata$vector_number_of_features_per_track %>%
(function(x) {
if (sum(x) != 0) {
return(x/sum(x))
} else {
return(0)}
} ) ),
# facet-specific brush resizing (y)
ggh4x::facetted_pos_scales(
y = workshop_list_plot_metadata$list_y_axis_scale %>% purrr::map(~scale_y_discrete(limits = .x, breaks = .x, labels = .x))
),
# brush resizing (x)
coord_cartesian(xlim = workshop_plot_brush_ranges$x, ylim = workshop_plot_brush_ranges$y),
theme_bw(),
theme(text = element_text(family = "Helvetica"))
)  %>% purrr::reduce(ggplot2:::`+.gg`)
ggplot_final_plot
runApp()
runApp()
workshop_list_plot_metadata$list_y_axis_scale
runApp()
runApp()
list_tibbles_track_features_visible_flattened
workshop_list_plot_metadata$list_y_axis_scale %>% names
list(
ggplot(),
ggplot2::facet_grid(panel ~ ., scales = "free_y")) %>%
purrr::splice(
# reference_gtf
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference GTF")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference GTF")],
.f = function(a1) {
list(
geom_segment(data = a1 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
geom_text(data = a1 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = hgnc_stable_variant_ID, "b3" = transcript_version), .f = function(b1, b2, b3) {if (b1 == "+") {paste("> > > > > > ", b2, if (is.na(b3) == FALSE) {"."}, if (is.na(b3) == FALSE) {b3}, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, if (is.na(b3) == FALSE) {"."}, if (is.na(b3) == FALSE) {b3}, " < < < < < <", sep = "")} else {paste(b2, if (is.na(b3) == FALSE) {"."}, if (is.na(b3)) {b3}, sep = "")} } ) %>% unlist)),
geom_segment(data = a1 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
geom_label(data = a1 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
)
} ) %>% purrr::flatten()
},
# custom_gtf
if (length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")]) > 0) {
purrr::map(
.x = list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Custom GTF")],
.f = function(a2) {
list(
geom_segment(data = a2 %>% dplyr::filter(type == "transcript"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id)),
geom_text(data = a2 %>% dplyr::filter(type == "transcript"), nudge_y = 0.25, mapping = aes(x = mean(workshop_plot_brush_ranges$x), y = transcript_id, label = purrr::pmap(.l = list("b1" = strand, "b2" = transcript_id), .f = function(b1, b2) {if (b1 == "+") {paste("> > > > > > ", b2, " > > > > > >", sep = "")} else if (b1 == "-") {paste("< < < < < < ", b2, " < < < < < <", sep = "")} else {b2} } ) %>% unlist)),
geom_segment(data = a2 %>% dplyr::filter(type == "exon"), colour = "slateblue1", mapping = aes(x = start, xend = end, y = transcript_id, yend = transcript_id), size = 10),
geom_label(data = a2 %>% dplyr::filter(type == "exon"), colour = "black", nudge_y = 0.15, fontface = "bold.italic", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = paste("E", exon_number, sep = "")))
)
} ) %>% purrr::flatten()
},
# user ranges
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_curve(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Junction" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 2, curvature = -0.25, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ]) > 0) {
geom_segment(data = tibble_user_ranges_visible[tibble_user_ranges_visible$range_type == "Exon" & tibble_user_ranges_visible$id != "0", ], colour = "grey50", size = 5, mapping = aes(x = start, xend = end, y = id, yend = id))
},
if (nrow(tibble_user_ranges_visible) > 1) {
geom_text(data = tibble_user_ranges_visible[tibble_user_ranges_visible$id != "0", ], colour = "black", nudge_y = 0.25, fontface = "bold", mapping = aes(x = purrr::map2(.x = start, .y = end, .f = ~c(.x, .y) %>% mean) %>% unlist, y = id, label = id))
},
if (workshop_list_selected_user_range$id %in% tibble_user_ranges_visible$id) {
geom_vline(colour = "red", lty = 2, xintercept = workshop_list_selected_user_range$start)
},
if (workshop_list_selected_user_range$id %in% tibble_user_ranges_visible$id) {
geom_vline(colour = "red", lty = 2, xintercept = workshop_list_selected_user_range$end)
},
# distance annotation
if (length(list_distances_between_user_ranges_and_reference_annotations) > 0) {
purrr::map(
.x = list_distances_between_user_ranges_and_reference_annotations,
.f = function(a3) {
list(
geom_segment(data = a3, colour = "red", arrow = arrow(angle = 45), mapping = aes(x = ref_vertex, xend = query_vertex, y = transcript_id, yend = transcript_id)),
geom_label(data = a3, colour = "red", nudge_y = -0.25, mapping = aes(x = purrr::map2(.x = ref_vertex, .y = query_vertex, .f = ~c(.x, .y) %>% mean) %>% unlist, y = transcript_id, label = ref_vertex_minus_query_vertex))
)
} ) %>% purrr::flatten()
},
# these mark the original viewing window
geom_vline(colour = "green", lty = 2, xintercept = workshop_list_current_plot_range$start),
geom_vline(colour = "green", lty = 2, xintercept = workshop_list_current_plot_range$end),
# adaptive facet aspect ratio
ggh4x::force_panelsizes(rows = workshop_list_plot_metadata$vector_number_of_features_per_track %>%
(function(x) {
if (sum(x) != 0) {
return(x/sum(x))
} else {
return(0)}
} ) ),
# facet-specific brush resizing (y)
ggh4x::facetted_pos_scales(
y = workshop_list_plot_metadata$list_y_axis_scale %>% purrr::map(~scale_y_discrete(limits = .x, breaks = .x, labels = .x))
),
# brush resizing (x)
coord_cartesian(xlim = workshop_plot_brush_ranges$x, ylim = workshop_plot_brush_ranges$y),
theme_bw(),
theme(text = element_text(family = "Helvetica"))
)  %>% purrr::reduce(ggplot2:::`+.gg`)
runApp()
workshop_list_plot_metadata$list_y_axis_scale
length(list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference GTF")]) > 0
list_tibbles_track_features_visible_flattened[grep(x = names(list_tibbles_track_features_visible_flattened), pattern = "^Reference GTF")] %>% purrr::map(~.x[mixedorder(.x$hgnc_stable_variant_ID), ] %>% .$transcript_id %>% unique %>% na.omit %>% rev)
list_tibbles_track_features_visible_flattened$`Reference GTF: ensembl_54`
list_tibbles_track_features_visible_flattened$`Reference GTF: ensembl_54`$transcript_id %>% unique
list_tibbles_track_features_visible_flattened
list_distance_annotation_data_flattened
list_tibbles_track_features_visible_flattened$`Reference GTF: ensembl_54`$transcript_id %>% unique
list_distance_annotation_data_flattened %>% purrr::map(~.x$tibble_all_exons_of_overlapped_parent_transcript$transcript_id %>% unique)
list_tibbles_track_features_visible_flattened
list_tibbles_track_features_visible_flattened$`Reference GTF: ensembl_54` %>% .$transcript_id %>% unique
list_tibbles_track_features_visible_flattened_initial$`Reference GTF: ensembl_54` %>% .$transcript_id %>% unique
list_tibbles_track_features_all_flattened
runApp()
list_tibbles_track_features_all_flattened
list_tibbles_track_features_all_flattened$ensembl_54$transcript_id %>% unqieu
list_tibbles_track_features_all_flattened$ensembl_54$transcript_id %>% unique
list_tibbles_track_features_all_flattened$ensembl_54$transcript_id %>% unique %>% grep(pattern = "MSC")
list_tibbles_track_features_visible_flattened
names(list_tibbles_track_features_visible_flattened)
a1 <- list_tibbles_track_features_visible_flattened[[1]]
a2 <- names(list_tibbles_track_features_visible_flattened)[[1]]
a3 <- list_tibbles_track_features_all_flattened[[1]]
###########
a1
a2
a3
list_tibbles_track_features_all_flattened %>% names
# determine transcript ids overlapped by user range
tibble_ref_transcripts_overlapped_by_user_query <- extract_overlapping_features(query_chr = selected_user_range_chr, query_start = selected_user_range_start, query_end = selected_user_range_end, query_strand = c("*"), tibble_gtf_table = a1, left_query_shift = input$workshop_left_query_end_shift %>% type.convert, right_query_shift = input$workshop_right_query_end_shift %>% type.convert, left_tolerance = input$workshop_left_match_tolerance %>% type.convert, right_tolerance = input$workshop_right_match_tolerance %>% type.convert, return_type = "transcript")
tibble_ref_transcripts_overlapped_by_user_query
a1
selected_user_range_end
# determine visible transcript ids overlapped by user range
tibble_ref_transcripts_overlapped_by_user_query <- extract_overlapping_features(query_chr = selected_user_range_chr, query_start = selected_user_range_start, query_end = selected_user_range_end, query_strand = c("*"), tibble_gtf_table = a1, left_query_shift = input$workshop_left_query_end_shift %>% type.convert, right_query_shift = input$workshop_right_query_end_shift %>% type.convert, left_tolerance = input$workshop_left_match_tolerance %>% type.convert, right_tolerance = input$workshop_right_match_tolerance %>% type.convert, return_type = "transcript")
selected_user_range_chr <- "7"
selected_user_range_start <- 7157427
selected_user_range_end <- 7234302
# determine visible transcript ids overlapped by user range
tibble_ref_transcripts_overlapped_by_user_query <- extract_overlapping_features(query_chr = selected_user_range_chr, query_start = selected_user_range_start, query_end = selected_user_range_end, query_strand = "*", tibble_gtf_table = a1, left_query_shift = input$workshop_left_query_end_shift %>% type.convert, right_query_shift = input$workshop_right_query_end_shift %>% type.convert, left_tolerance = input$workshop_left_match_tolerance %>% type.convert, right_tolerance = input$workshop_right_match_tolerance %>% type.convert, return_type = "transcript")
tibble_ref_transcripts_overlapped_by_user_query <- extract_overlapping_features(query_chr = selected_user_range_chr, query_start = selected_user_range_start, query_end = selected_user_range_end, query_strand = "*", tibble_gtf_table = a1, left_query_shift = 0, right_query_shift = 0, left_tolerance = 1, right_tolerance = 1, return_type = "transcript")
tibble_ref_transcripts_overlapped_by_user_query
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
workshop_list_plot_metadata
runApp()
runApp()
runApp()
list_tibbles_track_features_all_flattened
list_tibbles_track_features_all_flattened
tibble_all_exons_of_overlapped_parent_transcript
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
workshop_list_plot_metadata
runApp()
runApp()
brush
runApp()
workshop_list_plot_metadata
workshop_list_plot_metadata$list_y_axis_scale %>% .[["Reference GTF: ensembl_102"]]
workshop_list_plot_metadata$list_y_axis_scale[[]]
workshop_list_plot_metadata$list_y_axis_scale[["Reference GTF: ensembl_102"]]
workshop_list_plot_metadata$list_y_axis_scale[["brush$panelvar1"]] <- c("ENST00000429911", "ENST00000402468")
workshop_list_plot_metadata$list_y_axis_scale[["brush$panelvar1"]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
workshop_list_plot_metadata
workshop_list_plot_metadata$list_y_axis_scale_initial
workshop_list_plot_metadata$list_y_axis_scale
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
workshop_list_plot_metadata$list_y_axis_scale[[brush$panelvar]]  %>% .[(brush$ymin %>% round(0)):(brush$ymax %>% round(0))] %>% na.omit
workshop_list_plot_metadata$list_y_axis_scale[["Reference GTF: ensembl_102"]]  %>% .[(brush$ymin %>% round(0)):(brush$ymax %>% round(0))] %>% na.omit
workshop_list_plot_metadata$list_y_axis_scale[["Reference GTF: ensembl_102"]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
workshop_list_selected_user_range$id %in% tibble_user_ranges_visible$id
runApp()
runApp()
runApp()
runApp()
runApp()
list_tibbles_track_features_visible_flattened
list_tibbles_track_features_all_flattened
list_tibbles_track_features_visible_flattened
list_tibbles_track_features_visible_flattened
purrr::pmap(
.l = list(
"a1" = list_tibbles_track_features_visible_flattened,
"a2" = list_distance_annotation_data_flattened %>% purrr::map(~.x$tibble_all_exons_of_overlapped_parent_transcript),
"a3" = names(list_tibbles_track_features_visible_flattened)
), .f = function(a1, a2, a3) {
dplyr::bind_rows(a1, a2) %>% dplyr::mutate("panel" = a3) %>%
return
}
) %>% set_names(nm = names(list_tibbles_track_features_visible_flattened))
list_distance_annotation_data_flattened
list_tibbles_track_features_visible_flattened
list() %>% length
runApp()
runApp()
runApp()
workshop_list_selected_user_range$id %in% tibble_user_ranges_visible$id
workshop_list_selected_user_range$start
tibble_user_ranges_visible
workshop_list_selected_user_range
runApp()
tibble_user_ranges_visible
tibble_user_ranges_visible %>% dplyr::mutate("id" = 1:nrow(.))
tibble_user_ranges_visible %>% dplyr::mutate("id" = 0:nrow(.))
runApp()
Sys.Date()
Sys.time()
?Sys.time()
format(Sys.time(), "%a %b %d %X %Y")
?format
Sys.time() %>% stringi::stri_enc_toascii
Sys.time() %>% stringi::stri_enc_toascii()
runApp()
runApp()
runApp()
?Sys.time()
?Sys.time(options(digits.secs = 6))
Sys.time(options(digits.secs = 6))
options(digits.secs = 6); Sys.time()
options(digits.secs = 6); Sys.time() %>% as.numeric
function(x) {options(digits.secs = 6); Sys.time() %>% as.numeric %>% reutnr}
"A" %>% function(x) {options(digits.secs = 6); Sys.time() %>% as.numeric %>% return}
"A" %>% (function(x) {options(digits.secs = 6); Sys.time() %>% as.numeric %>% return})
"A" %>% function(x) {options(digits.secs = 9); Sys.time() %>% as.numeric %>% return}
"A" %>% (function(x) {options(digits.secs = 9); Sys.time() %>% as.numeric %>% return})
"A" %>% (function(x) {options(digits.secs = 9); Sys.time() %>% md5 %>% return})
runApp()
runApp()
runApp()
runApp()
?geom_linerange
runApp()
list_tibbles_track_features_visible_flattened
runApp()
list_tibbles_track_features_visible_flattened
runApp()
runApp()
runApp()
runApp()
